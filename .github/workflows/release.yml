# Copyright 2018-2020 The OpenEBS Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release Images and Charts

on:
  release:
    types:
      - 'created'

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: "."
          pattern: "*.sh"

      - uses: cachix/install-nix-action@v22
      - uses: rrbutani/use-nix-shell-action@v1.1.0
        with:
          file: shell.nix

      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.13
          cache: false

      - name: Lint Check
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.56.2
          args: -E exportloopref,dupl,revive,bodyclose,goconst,misspell -D structcheck --timeout 5m0s

      - name: Check if the chart follows a valid semver version
        run: |
          branch_name="${{ github.event.pull_request.base.ref }}"
          ./scripts/validate-chart-version.sh --branch $branch_name

      - name: Check if the chart is publishable
        run: |
          TAG=${{ github.event.release.tag_name }}
          ./scripts/update-chart-version.sh --tag $TAG --publish-release

      - name: Run chart-testing lint
        run: |
          ct lint --config ct.yaml

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.13

      - name: Checkout
        uses: actions/checkout@v4

      - name: Unit test
        run: make test

      - name: Verify corrections
        run: make verify-src

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4

  provisioner-localpv:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.13

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.5.1

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build multi-arch Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./buildscripts/provisioner-localpv/provisioner-localpv.Dockerfile
          push: false
          load: false
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            openebs/provisioner-localpv:ci

  integration-test:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    strategy:
      matrix:
        kubernetes: [v1.27.2]
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.13

      - name: Build images locally
        run: make provisioner-localpv-image || exit 1;

      - name: Setup Minikube-Kubernetes
        uses: medyagh/setup-minikube@latest
        with:
          cache: false
          minikube-version: 1.31.1
          driver: none
          kubernetes-version: ${{ matrix.kubernetes }}
          cni: calico
          start-args: '--install-addons=false'

      - name: Set up infra for integration test
        run: |
          sudo apt-get update && sudo apt-get install -y xfsprogs quota linux-modules-extra-`uname -r`
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@v2.14.0
          helm install localpv-provisioner ./deploy/helm/charts -n $OPENEBS_NAMESPACE --create-namespace --set localpv.image.pullPolicy=Never --set analytics.enabled=false

      - name: Integration test
        run: |
          make integration-test

  csi-driver:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Image Org
        # sets the default IMAGE_ORG to openebs
        run: |
          [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
          echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - name: Set Release Tag
        run: |
          TAG="${GITHUB_REF#refs/*/v}"
          echo "RELEASE_TAG=${TAG}" >> $GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
          echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%S%Z')" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          # add each registry to which the image needs to be pushed here
          images: |
            ${{ env.IMAGE_ORG }}/provisioner-localpv
            quay.io/${{ env.IMAGE_ORG }}/provisioner-localpv
            ghcr.io/${{ env.IMAGE_ORG }}/provisioner-localpv
          tags: |
            type=semver,pattern={{version}}

      - name: Print Tags
        run: |
          echo "${{ steps.docker_meta.outputs.tags }}"
          echo "RELEASE TAG: ${RELEASE_TAG}"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.5.1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./buildscripts/provisioner-localpv/provisioner-localpv.Dockerfile
          push: true
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            DBUILD_DATE=${{ steps.date.outputs.DATE }}
            DBUILD_REPO_URL=https://github.com/openebs/dynamic-localpv-provisioner
            DBUILD_SITE_URL=https://openebs.io
            RELEASE_TAG=${{ env.RELEASE_TAG }}
